{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "5d08bdbb",
   "metadata": {
    "tags": []
   },
   "source": [
    "---\n",
    "layout: page\n",
    "title: S&P500 and Tesla\n",
    "---"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "d3822f4f-c72b-4641-b25b-12407a527dc2",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import os\n",
    "import datetime\n",
    "start_date = pd.to_datetime('2011-01-01')\n",
    "end_date = pd.to_datetime('2025-01-01')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "75f51faf",
   "metadata": {},
   "source": [
    "## SPX 500\n",
    "\n",
    "This notebook imports SPX historical data from csv - rather than magic importing the dataframe from memory."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_2698/2741638322.py:11: FutureWarning: Passing literal html to 'read_html' is deprecated and will be removed in a future version. To read from a literal string, wrap it in a 'StringIO' object.\n",
      "  dfSpx = pd.read_html(html_file, encoding='cp1252')[0]\n"
     ]
    },
    {
     "ename": "ImportError",
     "evalue": "Missing optional dependency 'html5lib'.  Use pip or conda to install html5lib.",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)",
      "File \u001b[0;32m/opt/conda/lib/python3.11/site-packages/pandas/compat/_optional.py:135\u001b[0m, in \u001b[0;36mimport_optional_dependency\u001b[0;34m(name, extra, errors, min_version)\u001b[0m\n\u001b[1;32m    134\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[0;32m--> 135\u001b[0m     module \u001b[38;5;241m=\u001b[39m importlib\u001b[38;5;241m.\u001b[39mimport_module(name)\n\u001b[1;32m    136\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mImportError\u001b[39;00m:\n",
      "File \u001b[0;32m/opt/conda/lib/python3.11/importlib/__init__.py:126\u001b[0m, in \u001b[0;36mimport_module\u001b[0;34m(name, package)\u001b[0m\n\u001b[1;32m    125\u001b[0m         level \u001b[38;5;241m+\u001b[39m\u001b[38;5;241m=\u001b[39m \u001b[38;5;241m1\u001b[39m\n\u001b[0;32m--> 126\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m _bootstrap\u001b[38;5;241m.\u001b[39m_gcd_import(name[level:], package, level)\n",
      "File \u001b[0;32m<frozen importlib._bootstrap>:1204\u001b[0m, in \u001b[0;36m_gcd_import\u001b[0;34m(name, package, level)\u001b[0m\n",
      "File \u001b[0;32m<frozen importlib._bootstrap>:1176\u001b[0m, in \u001b[0;36m_find_and_load\u001b[0;34m(name, import_)\u001b[0m\n",
      "File \u001b[0;32m<frozen importlib._bootstrap>:1140\u001b[0m, in \u001b[0;36m_find_and_load_unlocked\u001b[0;34m(name, import_)\u001b[0m\n",
      "\u001b[0;31mModuleNotFoundError\u001b[0m: No module named 'html5lib'",
      "\nDuring handling of the above exception, another exception occurred:\n",
      "\u001b[0;31mImportError\u001b[0m                               Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[2], line 11\u001b[0m\n\u001b[1;32m      5\u001b[0m local_file \u001b[38;5;241m=\u001b[39m \u001b[38;5;124m'\u001b[39m\u001b[38;5;124m../data/spx_HistoricalData2010.csv\u001b[39m\u001b[38;5;124m'\u001b[39m\n\u001b[1;32m      6\u001b[0m \u001b[38;5;66;03m#max_age = datetime.timedelta(days=7)\u001b[39;00m\n\u001b[1;32m      7\u001b[0m \u001b[38;5;66;03m#if not os.path.exists(local_file) or datetime.datetime.now() - datetime.datetime.fromtimestamp(os.path.getmtime(local_file)) > max_age:\u001b[39;00m\n\u001b[1;32m      8\u001b[0m \u001b[38;5;66;03m#    import urllib.request\u001b[39;00m\n\u001b[1;32m      9\u001b[0m \u001b[38;5;66;03m#    urllib.request.urlretrieve(csv_file, local_file)\u001b[39;00m\n\u001b[1;32m     10\u001b[0m \u001b[38;5;66;03m#dfSpx = pd.read_csv(local_file, encoding='cp1252')    \u001b[39;00m\n\u001b[0;32m---> 11\u001b[0m dfSpx \u001b[38;5;241m=\u001b[39m pd\u001b[38;5;241m.\u001b[39mread_html(html_file, encoding\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mcp1252\u001b[39m\u001b[38;5;124m'\u001b[39m)[\u001b[38;5;241m0\u001b[39m] \n\u001b[1;32m     12\u001b[0m dfSpx\u001b[38;5;241m.\u001b[39mto_csv(local_file, index\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mFalse\u001b[39;00m)\n\u001b[1;32m     13\u001b[0m dfSpx \u001b[38;5;241m=\u001b[39m dfSpx\u001b[38;5;241m.\u001b[39mdrop(dfSpx\u001b[38;5;241m.\u001b[39mindex[\u001b[38;5;241m-\u001b[39m\u001b[38;5;241m1\u001b[39m])\n",
      "File \u001b[0;32m/opt/conda/lib/python3.11/site-packages/pandas/io/html.py:1246\u001b[0m, in \u001b[0;36mread_html\u001b[0;34m(io, match, flavor, header, index_col, skiprows, attrs, parse_dates, thousands, encoding, decimal, converters, na_values, keep_default_na, displayed_only, extract_links, dtype_backend, storage_options)\u001b[0m\n\u001b[1;32m   1230\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(io, \u001b[38;5;28mstr\u001b[39m) \u001b[38;5;129;01mand\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28many\u001b[39m(\n\u001b[1;32m   1231\u001b[0m     [\n\u001b[1;32m   1232\u001b[0m         is_file_like(io),\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m   1236\u001b[0m     ]\n\u001b[1;32m   1237\u001b[0m ):\n\u001b[1;32m   1238\u001b[0m     warnings\u001b[38;5;241m.\u001b[39mwarn(\n\u001b[1;32m   1239\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mPassing literal html to \u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mread_html\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m is deprecated and \u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m   1240\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mwill be removed in a future version. To read from a \u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m   1243\u001b[0m         stacklevel\u001b[38;5;241m=\u001b[39mfind_stack_level(),\n\u001b[1;32m   1244\u001b[0m     )\n\u001b[0;32m-> 1246\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m _parse(\n\u001b[1;32m   1247\u001b[0m     flavor\u001b[38;5;241m=\u001b[39mflavor,\n\u001b[1;32m   1248\u001b[0m     io\u001b[38;5;241m=\u001b[39mio,\n\u001b[1;32m   1249\u001b[0m     match\u001b[38;5;241m=\u001b[39mmatch,\n\u001b[1;32m   1250\u001b[0m     header\u001b[38;5;241m=\u001b[39mheader,\n\u001b[1;32m   1251\u001b[0m     index_col\u001b[38;5;241m=\u001b[39mindex_col,\n\u001b[1;32m   1252\u001b[0m     skiprows\u001b[38;5;241m=\u001b[39mskiprows,\n\u001b[1;32m   1253\u001b[0m     parse_dates\u001b[38;5;241m=\u001b[39mparse_dates,\n\u001b[1;32m   1254\u001b[0m     thousands\u001b[38;5;241m=\u001b[39mthousands,\n\u001b[1;32m   1255\u001b[0m     attrs\u001b[38;5;241m=\u001b[39mattrs,\n\u001b[1;32m   1256\u001b[0m     encoding\u001b[38;5;241m=\u001b[39mencoding,\n\u001b[1;32m   1257\u001b[0m     decimal\u001b[38;5;241m=\u001b[39mdecimal,\n\u001b[1;32m   1258\u001b[0m     converters\u001b[38;5;241m=\u001b[39mconverters,\n\u001b[1;32m   1259\u001b[0m     na_values\u001b[38;5;241m=\u001b[39mna_values,\n\u001b[1;32m   1260\u001b[0m     keep_default_na\u001b[38;5;241m=\u001b[39mkeep_default_na,\n\u001b[1;32m   1261\u001b[0m     displayed_only\u001b[38;5;241m=\u001b[39mdisplayed_only,\n\u001b[1;32m   1262\u001b[0m     extract_links\u001b[38;5;241m=\u001b[39mextract_links,\n\u001b[1;32m   1263\u001b[0m     dtype_backend\u001b[38;5;241m=\u001b[39mdtype_backend,\n\u001b[1;32m   1264\u001b[0m     storage_options\u001b[38;5;241m=\u001b[39mstorage_options,\n\u001b[1;32m   1265\u001b[0m )\n",
      "File \u001b[0;32m/opt/conda/lib/python3.11/site-packages/pandas/io/html.py:977\u001b[0m, in \u001b[0;36m_parse\u001b[0;34m(flavor, io, match, attrs, encoding, displayed_only, extract_links, storage_options, **kwargs)\u001b[0m\n\u001b[1;32m    975\u001b[0m retained \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m\n\u001b[1;32m    976\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m flav \u001b[38;5;129;01min\u001b[39;00m flavor:\n\u001b[0;32m--> 977\u001b[0m     parser \u001b[38;5;241m=\u001b[39m _parser_dispatch(flav)\n\u001b[1;32m    978\u001b[0m     p \u001b[38;5;241m=\u001b[39m parser(\n\u001b[1;32m    979\u001b[0m         io,\n\u001b[1;32m    980\u001b[0m         compiled_match,\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m    985\u001b[0m         storage_options,\n\u001b[1;32m    986\u001b[0m     )\n\u001b[1;32m    988\u001b[0m     \u001b[38;5;28;01mtry\u001b[39;00m:\n",
      "File \u001b[0;32m/opt/conda/lib/python3.11/site-packages/pandas/io/html.py:921\u001b[0m, in \u001b[0;36m_parser_dispatch\u001b[0;34m(flavor)\u001b[0m\n\u001b[1;32m    916\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\n\u001b[1;32m    917\u001b[0m         \u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;132;01m{\u001b[39;00m\u001b[38;5;28mrepr\u001b[39m(flavor)\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m is not a valid flavor, valid flavors are \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mvalid_parsers\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    918\u001b[0m     )\n\u001b[1;32m    920\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m flavor \u001b[38;5;129;01min\u001b[39;00m (\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mbs4\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mhtml5lib\u001b[39m\u001b[38;5;124m\"\u001b[39m):\n\u001b[0;32m--> 921\u001b[0m     import_optional_dependency(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mhtml5lib\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[1;32m    922\u001b[0m     import_optional_dependency(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mbs4\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[1;32m    923\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n",
      "File \u001b[0;32m/opt/conda/lib/python3.11/site-packages/pandas/compat/_optional.py:138\u001b[0m, in \u001b[0;36mimport_optional_dependency\u001b[0;34m(name, extra, errors, min_version)\u001b[0m\n\u001b[1;32m    136\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mImportError\u001b[39;00m:\n\u001b[1;32m    137\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m errors \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mraise\u001b[39m\u001b[38;5;124m\"\u001b[39m:\n\u001b[0;32m--> 138\u001b[0m         \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mImportError\u001b[39;00m(msg)\n\u001b[1;32m    139\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m\n\u001b[1;32m    141\u001b[0m \u001b[38;5;66;03m# Handle submodules: if we have submodule, grab parent module from sys.modules\u001b[39;00m\n",
      "\u001b[0;31mImportError\u001b[0m: Missing optional dependency 'html5lib'.  Use pip or conda to install html5lib."
     ]
    }
   ],
   "source": [
    "# S&P 500 SPX monthly index from 1959\n",
    "#csv_file = 'https://finance.yahoo.com/quote/%5EGSPC/history?period1=1262304000&period2=1702771200&interval=1d&filter=history&frequency=1d&includeAdjustedClose=true'\n",
    "# extracted table to html file\n",
    "html_file = '../data/temp.html'\n",
    "local_file = '../data/spx_HistoricalData2010.csv'\n",
    "#max_age = datetime.timedelta(days=7)\n",
    "#if not os.path.exists(local_file) or datetime.datetime.now() - datetime.datetime.fromtimestamp(os.path.getmtime(local_file)) > max_age:\n",
    "#    import urllib.request\n",
    "#    urllib.request.urlretrieve(csv_file, local_file)\n",
    "#dfSpx = pd.read_csv(local_file, encoding='cp1252')    \n",
    "dfSpx = pd.read_html(html_file, encoding='cp1252')[0] \n",
    "dfSpx.to_csv(local_file, index=False)\n",
    "dfSpx = dfSpx.drop(dfSpx.index[-1]) # drop the last row of disclaimers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4d37f552-f01f-4419-b2c6-d21eb39e5152",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Open</th>\n",
       "      <th>High</th>\n",
       "      <th>Low</th>\n",
       "      <th>Close*</th>\n",
       "      <th>Price</th>\n",
       "      <th>Volume</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2010-01-04</th>\n",
       "      <td>1116.56</td>\n",
       "      <td>1133.87</td>\n",
       "      <td>1116.56</td>\n",
       "      <td>1132.99</td>\n",
       "      <td>1132.99</td>\n",
       "      <td>3991400000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2010-01-05</th>\n",
       "      <td>1132.66</td>\n",
       "      <td>1136.63</td>\n",
       "      <td>1129.66</td>\n",
       "      <td>1136.52</td>\n",
       "      <td>1136.52</td>\n",
       "      <td>2491020000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2010-01-06</th>\n",
       "      <td>1135.71</td>\n",
       "      <td>1139.19</td>\n",
       "      <td>1133.95</td>\n",
       "      <td>1137.14</td>\n",
       "      <td>1137.14</td>\n",
       "      <td>4972660000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2010-01-07</th>\n",
       "      <td>1136.27</td>\n",
       "      <td>1142.46</td>\n",
       "      <td>1131.32</td>\n",
       "      <td>1141.69</td>\n",
       "      <td>1141.69</td>\n",
       "      <td>5270680000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2010-01-08</th>\n",
       "      <td>1140.52</td>\n",
       "      <td>1145.39</td>\n",
       "      <td>1136.22</td>\n",
       "      <td>1144.98</td>\n",
       "      <td>1144.98</td>\n",
       "      <td>4389590000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               Open     High      Low   Close*    Price      Volume\n",
       "Date                                                               \n",
       "2010-01-04  1116.56  1133.87  1116.56  1132.99  1132.99  3991400000\n",
       "2010-01-05  1132.66  1136.63  1129.66  1136.52  1136.52  2491020000\n",
       "2010-01-06  1135.71  1139.19  1133.95  1137.14  1137.14  4972660000\n",
       "2010-01-07  1136.27  1142.46  1131.32  1141.69  1141.69  5270680000\n",
       "2010-01-08  1140.52  1145.39  1136.22  1144.98  1144.98  4389590000"
      ]
     },
     "execution_count": 68,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dfSpx.rename(columns={'Adj Close**': 'Price'}, inplace=True)\n",
    "dfSpx['Price'] = pd.to_numeric(dfSpx['Price'], errors='coerce')\n",
    "dfSpx['Date'] = pd.to_datetime(dfSpx['Date'], format='%b %d, %Y')\n",
    "dfSpx.set_index('Date', inplace=True)\n",
    "dfSpx.sort_values(by='Date', ascending=True, inplace=True)\n",
    "dfSpx.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "889d1366",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Open</th>\n",
       "      <th>High</th>\n",
       "      <th>Low</th>\n",
       "      <th>Close*</th>\n",
       "      <th>Price</th>\n",
       "      <th>Volume</th>\n",
       "      <th>YoY Change</th>\n",
       "      <th>3 Yr Rolling Avg</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2023-12-11</th>\n",
       "      <td>4593.39</td>\n",
       "      <td>4623.71</td>\n",
       "      <td>4593.39</td>\n",
       "      <td>4622.44</td>\n",
       "      <td>4622.44</td>\n",
       "      <td>3823210000</td>\n",
       "      <td>16.624911</td>\n",
       "      <td>11.804009</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-12-12</th>\n",
       "      <td>4618.30</td>\n",
       "      <td>4643.93</td>\n",
       "      <td>4608.09</td>\n",
       "      <td>4643.70</td>\n",
       "      <td>4643.70</td>\n",
       "      <td>3808380000</td>\n",
       "      <td>18.028762</td>\n",
       "      <td>11.805042</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-12-13</th>\n",
       "      <td>4646.20</td>\n",
       "      <td>4709.69</td>\n",
       "      <td>4643.23</td>\n",
       "      <td>4707.09</td>\n",
       "      <td>4707.09</td>\n",
       "      <td>5063650000</td>\n",
       "      <td>17.955625</td>\n",
       "      <td>11.806626</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-12-14</th>\n",
       "      <td>4721.04</td>\n",
       "      <td>4738.57</td>\n",
       "      <td>4694.34</td>\n",
       "      <td>4719.55</td>\n",
       "      <td>4719.55</td>\n",
       "      <td>6314040000</td>\n",
       "      <td>17.411964</td>\n",
       "      <td>11.808998</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-12-15</th>\n",
       "      <td>4714.23</td>\n",
       "      <td>4725.53</td>\n",
       "      <td>4704.69</td>\n",
       "      <td>4719.19</td>\n",
       "      <td>4719.19</td>\n",
       "      <td>8218980000</td>\n",
       "      <td>18.117948</td>\n",
       "      <td>11.812982</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               Open     High      Low   Close*    Price      Volume  \\\n",
       "Date                                                                  \n",
       "2023-12-11  4593.39  4623.71  4593.39  4622.44  4622.44  3823210000   \n",
       "2023-12-12  4618.30  4643.93  4608.09  4643.70  4643.70  3808380000   \n",
       "2023-12-13  4646.20  4709.69  4643.23  4707.09  4707.09  5063650000   \n",
       "2023-12-14  4721.04  4738.57  4694.34  4719.55  4719.55  6314040000   \n",
       "2023-12-15  4714.23  4725.53  4704.69  4719.19  4719.19  8218980000   \n",
       "\n",
       "            YoY Change  3 Yr Rolling Avg  \n",
       "Date                                      \n",
       "2023-12-11   16.624911         11.804009  \n",
       "2023-12-12   18.028762         11.805042  \n",
       "2023-12-13   17.955625         11.806626  \n",
       "2023-12-14   17.411964         11.808998  \n",
       "2023-12-15   18.117948         11.812982  "
      ]
     },
     "execution_count": 69,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dfSpx['YoY Change'] = dfSpx['Price'].pct_change(periods=252) *100\n",
    "dfSpx['3 Yr Rolling Avg'] = dfSpx['YoY Change'].rolling(window=(252*3), min_periods=1).mean()\n",
    "dfSpx = dfSpx.loc[dfSpx.index >= start_date]\n",
    "dfSpx.tail()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "09c26c4f",
   "metadata": {},
   "source": [
    "# TSLA"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1e05760b",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Daily TSLA index for 10 years from 2013\n",
    "# https://www.nasdaq.com/market-activity/index/tsla/historical  < NO! DOES NOT INC SPLIT ADJUSTED CLOSE! USE YAHOO!\n",
    "# https://finance.yahoo.com/quote/TSLA/history?period1=1277769600&period2=1701907200&interval=1d&filter=history&frequency=1d&includeAdjustedClose=true\n",
    "# Select max date range and download csv file\n",
    "csv_file = '../data/tsla_HistoricalData.csv'\n",
    "dfTsla = pd.read_csv(csv_file, encoding='cp1252', usecols=['Date', 'Adj Close'])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ff52e9f4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Price</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Date</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2010-06-29</th>\n",
       "      <td>1.592667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2010-06-30</th>\n",
       "      <td>1.588667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2010-07-01</th>\n",
       "      <td>1.464000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2010-07-02</th>\n",
       "      <td>1.280000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2010-07-06</th>\n",
       "      <td>1.074000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               Price\n",
       "Date                \n",
       "2010-06-29  1.592667\n",
       "2010-06-30  1.588667\n",
       "2010-07-01  1.464000\n",
       "2010-07-02  1.280000\n",
       "2010-07-06  1.074000"
      ]
     },
     "execution_count": 71,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#dfTsla.rename(columns={'Price': 'Pre-split Price'}, inplace=True)\n",
    "dfTsla.rename(columns={'Adj Close': 'Price'}, inplace=True)\n",
    "dfTsla['Date'] = pd.to_datetime(dfTsla['Date'])\n",
    "dfTsla.set_index('Date', inplace=True)\n",
    "dfTsla.sort_values(by='Date', ascending=True, inplace=True)\n",
    "dfTsla.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ddf84143",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Price</th>\n",
       "      <th>YoY Change</th>\n",
       "      <th>3 Yr Rolling Avg</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2011-01-03</th>\n",
       "      <td>1.774667</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2011-01-04</th>\n",
       "      <td>1.778000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2011-01-05</th>\n",
       "      <td>1.788667</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2011-01-06</th>\n",
       "      <td>1.858667</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2011-01-07</th>\n",
       "      <td>1.882667</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               Price  YoY Change  3 Yr Rolling Avg\n",
       "Date                                              \n",
       "2011-01-03  1.774667         NaN               NaN\n",
       "2011-01-04  1.778000         NaN               NaN\n",
       "2011-01-05  1.788667         NaN               NaN\n",
       "2011-01-06  1.858667         NaN               NaN\n",
       "2011-01-07  1.882667         NaN               NaN"
      ]
     },
     "execution_count": 72,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# weekly change Year over Year\n",
    "dfTsla['YoY Change'] = dfTsla['Price'].pct_change(periods=252) * 100\n",
    "dfTsla['3 Yr Rolling Avg'] = dfTsla['YoY Change'].rolling(window=(252*3)).mean()\n",
    "dfTsla = dfTsla.loc[dfTsla.index >= start_date]\n",
    "dfTsla.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2908689e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(10, 6))\n",
    "colors = list(plt.rcParams['axes.prop_cycle'])\n",
    "plt.plot(dfTsla.index, dfTsla['YoY Change'], label='TSLA YOY', color=colors[1]['color'], alpha=0.1)\n",
    "plt.plot(dfTsla.index, dfTsla['3 Yr Rolling Avg'], label='TSLA 3 Yr Rolling Average', color=colors[1]['color'])\n",
    "plt.plot(dfSpx.index, dfSpx['YoY Change'], label='SPX YOY', color=colors[0]['color'], alpha=0.1)\n",
    "plt.plot(dfSpx.index, dfSpx['3 Yr Rolling Avg'], label='SPX 3 Yr Rolling Average', color=colors[0]['color'])\n",
    "plt.xlabel('Date')\n",
    "plt.ylabel('Annual % Change')\n",
    "plt.suptitle('www.nasdaq.com/market-activity')\n",
    "plt.title('YoY Annual Price Change (excludes dividend yield and inflation)')\n",
    "plt.grid(True)\n",
    "plt.yticks(range(-100, 1000, 100))\n",
    "plt.ylim(bottom=-100, top=1000)\n",
    "plt.xlim(left=start_date, right=end_date)\n",
    "#plt.axhline(y=0, color='darkred')  # Add horizontal line at y=0\n",
    "legend = plt.legend(loc='best')\n",
    "legend.get_frame().set_facecolor('white')\n",
    "legend.get_frame().set_alpha(0.98)\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
